" Tracks this event from the Tribeone.sol contract "
type TribeExchange @entity {
  id: ID!
  account: Exchanger! # address
  fromTribe: Tribe
  toTribe: Tribe
  fromAmount: BigDecimal! # uint256
  fromAmountInUSD: BigDecimal! # from Amount including fees
  toAmount: BigDecimal! # uint256
  toAmountInUSD: BigDecimal! # to Amount without fees
  feesInUSD: BigDecimal!
  toAddress: Bytes! # address
  timestamp: BigInt!
  gasPrice: BigInt!
}

" Tracks this event from the Tribeone.sol contract. (Atomic exchanges also trigger standard TribeExchange events.)"
type AtomicTribeExchange @entity {
  id: ID!
  account: Exchanger! # address
  fromTribe: Tribe
  toTribe: Tribe
  fromAmount: BigDecimal! # uint256
  fromAmountInUSD: BigDecimal! # from Amount including fees
  toAmount: BigDecimal! # uint256
  toAmountInUSD: BigDecimal! # to Amount without fees
  feesInUSD: BigDecimal!
  toAddress: Bytes! # address
  timestamp: BigInt!
  gasPrice: BigInt!
}

" Tracks this event from the Tribeone.sol contract "
type ExchangeReclaim @entity {
  id: ID!
  account: Exchanger! # address
  currencyKey: Bytes! # bytes4
  amount: BigDecimal! # uint256
  amountInUSD: BigDecimal! # uint256
  timestamp: BigInt!
  gasPrice: BigInt!
  block: BigInt!
}

" Tracks this event from the Tribeone.sol contract "
type ExchangeRebate @entity {
  id: ID!
  account: Exchanger!
  currencyKey: Bytes! # bytes4
  amount: BigDecimal! # uint256
  amountInUSD: BigDecimal! # uint256
  timestamp: BigInt!
  gasPrice: BigInt!
  block: BigInt!
}

# Aggrgeations of the tribe exchanges by various time/volume groupings
type Total @entity {
  " $timestamp-$bucketMagnitude-$tribe-$period "
  id: ID!

  " timestamp of the beginning of the time period this represents "
  timestamp: BigInt!

  " which product the volume came from. Ex 'futures' or 'exchange' "
  product: String

  " number of seconds the data covers after `timestamp` "
  period: BigInt!

  " minimum power of 10 (in from USD value) the trade must be. ex, 2 means $100 or higher) "
  bucketMagnitude: BigInt!

  " tribe to filter by "
  tribe: Tribe

  " number of trades completed over period "
  trades: BigInt!

  " number of unique traders who were first seen in this period "
  newExchangers: BigInt!

  " number of unique traders seen over period "
  exchangers: BigInt!

  " tribe value exchanged in USD units "
  exchangeUSDTally: BigDecimal!

  " tribe value received in fees in USD units "
  totalFeesGeneratedInUSD: BigDecimal!
}

" An individual Exchanger aggregated by various time groupings "
type Exchanger @entity {
  " hex address in lowercase (and for non global: hex address in lowercase-$timestamp-$period-$bucketMagnitude-$tribe "
  id: ID!

  " timestamp of the beginning of the time period this represents, or 0 for no period filter "
  timestamp: BigInt!

  " number of seconds the data covers after `timestamp`, or 0 for no period filter "
  period: BigInt!

  " minimum power of 10 (in from USD value) the trade must be. ex, 2 means $100 or higher) "
  bucketMagnitude: BigInt!

  " tribe to filter by "
  tribe: Tribe

  " when the user first exchanged "
  firstSeen: BigInt!

  " when the user last exchanged "
  lastSeen: BigInt!

  " nubmer of trades by account "
  trades: BigInt!

  " tribe value exchanged in USD units by account "
  exchangeUSDTally: BigDecimal!

  " tribe value received in fees in USD units from account "
  totalFeesGeneratedInUSD: BigDecimal!

  " balances "
  balances: [LatestTribeBalance!]!

  " exchanges "
  exchanges: [TribeExchange!]! @derivedFrom(field: "account")
}

type ExchangeFee @entity {
  " Name of the tribe. E.g. hUSD "
  id: ID!

  " Current Fee as a ratio of the trade amount "
  fee: BigDecimal!
}

type Candle @entity {
  " tribe-period-periodId (periodId is timestamp / period) "
  id: ID!
  " Ticker for tribe (e.g. 'hUSD') or 'HAKA'"
  tribe: String!
  open: BigDecimal!
  high: BigDecimal!
  low: BigDecimal!
  close: BigDecimal!
  average: BigDecimal!
  timestamp: BigInt!
  " Duration this candle captures in seconds. Year, quarter, month, week, day, hour, and 15 minutes available. "
  period: BigInt!
  " Number of RateUpdates aggregated into this candle, mostly useful for the indexer to calculate averages "
  aggregatedPrices: BigInt!
}

" DEPRECATED: See the Candles entity"
type DailyCandle @entity {
  " DEPRECATED: See the Candles entity "
  id: ID!
  tribe: String!
  open: BigDecimal!
  high: BigDecimal!
  low: BigDecimal!
  close: BigDecimal!
  timestamp: BigInt!
}

type InversePricingInfo @entity {
  " Name of inverse tribe. E.g. iETH "
  id: ID!

  " whether or not this inverse tribe has been frozen "
  frozen: Boolean!

  " configured upper limit "
  upperLimit: BigDecimal!

  " configured lower limit "
  lowerLimit: BigDecimal!

  " matching price point with long tribe "
  entryPoint: BigDecimal!
}

type LatestRate @entity {
  " Name of tribe. E.g. hUSD "
  id: ID!

  " Tribe USD rate "
  rate: BigDecimal!

  " Address of the aggregator which produces current result "
  aggregator: Bytes!
}

" Latest Rates over time "
type RateUpdate @entity {
  " <transaction hash>-<currency key> "
  id: ID!
  " currencyKey for which this this rate update applies "
  currencyKey: Bytes!
  " currencyKey expressed as a string "
  tribe: String!
  " the rate recorded at this timestamp "
  rate: BigDecimal!
  " the block which this rate was recorded "
  block: BigInt!
  " timestamp of the block in which the rate was recorded "
  timestamp: BigInt!
}

type TribeByCurrencyKey @entity {
  " currency key "
  id: ID!
  proxyAddress: Bytes!
}

type Tribe @entity {
  " lowercase address of the proxy contract for the tribe "
  id: ID!
  name: String!
  symbol: String!

  totalSupply: BigDecimal!
}

type TribeBalance @entity {
  " timestamp + account + tribe address "
  id: ID!
  amount: BigDecimal!
  address: Bytes!
  account: String! # using a string here because its ID compatible
  timestamp: BigInt!
  tribe: Tribe
}

" we dont query this entity but only use it to store aggregate data we need during syncing "
type LatestTribeBalance @entity {
  " account + tribe address "
  id: ID!
  amount: BigDecimal!
  address: Bytes!
  account: String!
  timestamp: BigInt!
  tribe: Tribe
}

type FuturesMarket @entity {
  " Address of the market "
  id: ID!
}
