type Short @entity {
  " the short id "
  id: ID!

  " contract level info for the short position "
  contractData: ShortContract!

  " the transaction hash of the short "
  txHash: String!

  " the account that created the short "
  account: Bytes!

  " the type of collateral locked - hUSD, ETH, renBTC "
  collateralLocked: Bytes!

  " the amount of collateral locked in the short "
  collateralLockedAmount: BigDecimal!

  " the denomination of the loan repayment - hETH, hBTC "
  tribeBorrowed: Bytes!

  " the amount owed denominated in the loan repayment tribe "
  tribeBorrowedAmount: BigDecimal!

  " the timestamp the accrued interest was most recently updated "
  accruedInterestLastUpdateTimestamp: BigInt!

  " is the short still open? "
  isOpen: Boolean!

  " the block the short was created at "
  createdAtBlock: BigInt!

  " the timestamp the short was created "
  createdAt: BigInt!

  " the timestamp the short was closed "
  closedAt: BigInt

  " liquidations that have been made on the short "
  liquidations: [ShortLiquidation!] @derivedFrom(field: "short")

  " collateral deposits and withdrawals that have been made on the short "
  collateralChanges: [ShortCollateralChange!] @derivedFrom(field: "short")

  " loan changes that have been made on the short - increasing or decreasing the short position "
  loanChanges: [ShortLoanChange!]! @derivedFrom(field: "short")
}

type ShortCollateralChange @entity {
  " the event tx hash plus event log index "
  id: ID!

  " denotes if the event was a deposit (true) or withdrawal (false)"
  isDeposit: Boolean!

  " the amount of collateral deposited or withdrawn "
  amount: BigDecimal!

  " the total amount of collateral after the deposit or withdrawal is included "
  collateralAfter: BigDecimal!

  " the respective short "
  short: Short!

  " the timestamp collateral was deposited or withdrawn "
  timestamp: BigInt!

  " the block the collateral was changed "
  blockNumber: BigInt!
}

type ShortLoanChange @entity {
  " the event tx hash plus event log index "
  id: ID!

  " denotes if the event was a repayment (true) or an increase of the loan (false)"
  isRepayment: Boolean!

  " the amount of loan repaid or increased "
  amount: BigDecimal!

  " the total amount of loan due after the repayment or increase is included "
  loanAfter: BigDecimal!

  " the respective short "
  short: Short!

  " the price of the repaid tribe in dollars "
  rate: BigDecimal!

  " the timestamp of the loan repayment or increase "
  timestamp: BigInt!

  " the block the short loan was changed "
  blockNumber: BigInt!
}

type ShortLiquidation @entity {
  " the event tx hash plus event log index "
  id: ID!

  " the account that liquidated the loan "
  liquidator: Bytes!

  " determines if the "
  isClosed: Boolean!

  " the amount of the loan that was burned "
  liquidatedAmount: BigDecimal!

  " the amount of the collateral that was taken away from the short owner "
  liquidatedCollateral: BigDecimal!

  " the respective short "
  short: Short!

  " the timestamp of the loan liquidation event "
  timestamp: BigInt!

  " the block of the liquidation event "
  blockNumber: BigInt!
}

type ShortContract @entity {
  " the address of the shorting contract "
  id: ID!

  " a list of shorts attached to each contract "
  shorts: [Short!] @derivedFrom(field: "contractData")

  " a list of changes to contract level data "
  contractUpdates: [ShortContractUpdate!] @derivedFrom(field: "contractData")

  " the min c-ratio for borrowers below which they can be liquidated "
  minCratio: BigInt!

  " the minimum collateral required to open a position "
  minCollateral: BigDecimal!

  " the fee for issuing a short "
  issueFeeRate: BigDecimal!

  " the max number of loans per account "
  maxLoansPerAccount: BigInt!

  " Time in seconds that a user must wait between interacting with a loan. Provides front running and flash loan protection. "
  interactionDelay: BigInt!

  " the manager is a contract that ties the shorting contract in with the rest of the Tribeone protocol "
  manager: Bytes!

  " a boolean that prevents new loans on the contract when false "
  canOpenLoans: Boolean!
}

type ShortContractUpdate @entity {
  " the event tx hash plus event log index "
  id: ID!

  " the field that was changed "
  field: String!

  " the new value of the field in string format "
  value: String!

  " the respective short contract "
  contractData: ShortContract!

  " the timestamp of the contract update event "
  timestamp: BigInt!

  " the block the short contract was udpated at "
  blockNumber: BigInt!
}

type InversePricingInfo @entity {
  " Name of inverse tribe. E.g. iETH "
  id: ID!

  " whether or not this inverse tribe has been frozen "
  frozen: Boolean!

  " configured upper limit "
  upperLimit: BigDecimal!

  " configured lower limit "
  lowerLimit: BigDecimal!

  " matching price point with long tribe "
  entryPoint: BigDecimal!
}

type LatestRate @entity {
  " Name of tribe. E.g. hUSD "
  id: ID!

  " Tribe USD rate "
  rate: BigDecimal!

  " Address of the aggregator which produces current result "
  aggregator: Bytes!
}

" Latest Rates over time "
type RateUpdate @entity {
  " <transaction hash>-<currency key> "
  id: ID!
  " currencyKey for which this this rate update applies "
  currencyKey: Bytes!
  " currencyKey expressed as a string "
  tribe: String!
  " the rate recorded at this timestamp "
  rate: BigDecimal!
  " the block which this rate was recorded "
  block: BigInt!
  " timestamp of the block in which the rate was recorded "
  timestamp: BigInt!
}

" DEPRECATED: See the Candles entity"
type DailyCandle @entity {
  " DEPRECATED: See the Candles entity "
  id: ID!
  tribe: String!
  open: BigDecimal!
  high: BigDecimal!
  low: BigDecimal!
  close: BigDecimal!
  timestamp: BigInt!
}
