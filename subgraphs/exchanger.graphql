type ExchangeEntrySettled @entity {
  " transaction hash and log index "
  id: ID!

  " tribe exchanged from "
  from: Bytes!

  " tribe exchanged to "
  src: Bytes!

  " number of units of tribe from exchanged "
  amount: BigDecimal!

  " address which receives the settlement "
  dest: Bytes!

  " amount reclaimed of dest due to underpayment "
  reclaim: BigDecimal!

  " amount returned of dest due to overpayment "
  rebate: BigDecimal!

  " aggregator price round for src tribe "
  srcRoundIdAtPeriodEnd: BigInt!

  " aggregator price round for dest tribe "
  destRoundIdAtPeriodEnd: BigInt!

  " time when the original exchange occured "
  exchangeTimestamp: BigInt!
}

type ExchangeEntryAppended @entity {
  " transaction hash and log index "
  id: ID! # the transaction hash plus event log
  " ethereum address which funded the exchange "
  account: Bytes!

  " tribe exchanged from "
  src: Bytes!

  " number of units of tribe from exchanged "
  amount: BigDecimal!

  " tribe exchanged to "
  dest: Bytes!

  " number of units of tribe to received "
  amountReceived: BigDecimal!

  " fee paid in hUSD to the tribeone fee pool "
  exchangeFeeRate: BigDecimal!

  " aggregator price round for src tribe "
  roundIdForSrc: BigInt!

  " aggregator price round for dest tribe "
  roundIdForDest: BigInt!
}

type TemporaryExchangePartnerTracker @entity {
  " Transaction hash of the Exchange event "
  id: ID!

  " Total transaction volume in USD across all ExchangeEntryAppended events in a single tx hash "
  usdVolume: BigDecimal

  " Total fees from this transaction hash "
  usdFees: BigDecimal

  " String format of the tracking code for a given partner "
  partner: String
}

type DailyExchangePartner @entity {
  " Day timestamp + tracking code of the partner "
  id: ID!

  " Total transaction volume in USD for the partner on this day "
  usdVolume: BigDecimal!

  " Total fees generated by the volume partner for this day "
  usdFees: BigDecimal!

  " Total number of trades from the volume partner for this day "
  trades: BigInt!

  " Tracking code of the partner "
  partner: String!

  " unix timestamp at the beginning of the day "
  timestamp: BigInt!
}

type ExchangePartner @entity {
  " Tracking code of the partner "
  id: ID!

  " Total transaction volume in USD for the partner "
  usdVolume: BigDecimal!

  " Total fees generated by the volume partner "
  usdFees: BigDecimal!

  " Total number of trades from the volume partner "
  trades: BigInt!
}

type InversePricingInfo @entity {
  " Name of inverse tribe. E.g. iETH "
  id: ID!

  " whether or not this inverse tribe has been frozen "
  frozen: Boolean!

  " configured upper limit "
  upperLimit: BigDecimal!

  " configured lower limit "
  lowerLimit: BigDecimal!

  " matching price point with long tribe "
  entryPoint: BigDecimal!
}

type LatestRate @entity {
  " Name of tribe. E.g. hUSD "
  id: ID!

  " Tribe USD rate "
  rate: BigDecimal!

  " Address of the aggregator which produces current result "
  aggregator: Bytes!
}

" Latest Rates over time "
type RateUpdate @entity {
  " <transaction hash>-<currency key> "
  id: ID!
  " currencyKey for which this this rate update applies "
  currencyKey: Bytes!
  " currencyKey expressed as a string "
  tribe: String!
  " the rate recorded at this timestamp "
  rate: BigDecimal!
  " the block which this rate was recorded "
  block: BigInt!
  " timestamp of the block in which the rate was recorded "
  timestamp: BigInt!
}

" DEPRECATED: See the Candles entity"
type DailyCandle @entity {
  " DEPRECATED: See the Candles entity "
  id: ID!
  tribe: String!
  open: BigDecimal!
  high: BigDecimal!
  low: BigDecimal!
  close: BigDecimal!
  timestamp: BigInt!
}
